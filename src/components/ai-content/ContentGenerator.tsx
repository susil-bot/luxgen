import React, { useState } from 'react';
import { Sparkles, Copy, Download, Share2, RefreshCw, Save, Eye, Edit } from 'lucide-react';
import contentCreatorAPI from '../../services/ContentCreatorAPI';

interface ContentGeneratorProps {
  contentType: 'text' | 'image' | 'video' | 'audio';
  isGenerating: boolean;
  setIsGenerating: (generating: boolean) => void;
}

const ContentGenerator: React.FC<ContentGeneratorProps> = ({ contentType, isGenerating, setIsGenerating }) => {
  const [prompt, setPrompt] = useState('');
  const [generatedContent, setGeneratedContent] = useState('');
  const [settings, setSettings] = useState({
    tone: 'professional',
    length: 'medium',
    style: 'informative',
    language: 'english'
  });

  const tones = ['professional', 'casual', 'creative', 'formal', 'friendly'];
  const lengths = ['short', 'medium', 'long'];
  const styles = ['informative', 'persuasive', 'storytelling', 'technical', 'conversational'];
  const languages = ['english', 'spanish', 'french', 'german', 'chinese'];

  const handleGenerate = async () => {
    if (!prompt.trim()) return;
    
    setIsGenerating(true);
    
    try {
      const response = await contentCreatorAPI.generateContent(contentType, prompt, {
        tone: settings.tone,
        length: settings.length,
        style: settings.style,
        language: settings.language,
      });

      if (response.success && response.data?.content) {
        setGeneratedContent(response.data.content);
      } else {
        // Fallback to mock content if API fails
        const mockContent = `Generated ${contentType} content based on: "${prompt}"\n\nThis is a sample ${contentType} content that would be generated by AI. It follows the ${settings.tone} tone, ${settings.length} length, and ${settings.style} style as specified in the settings.`;
        setGeneratedContent(mockContent);
        console.warn('API generation failed, using mock content:', response.error);
      }
    } catch (error) {
      console.error('Content generation error:', error);
      // Fallback to mock content
      const mockContent = `Generated ${contentType} content based on: "${prompt}"\n\nThis is a sample ${contentType} content that would be generated by AI. It follows the ${settings.tone} tone, ${settings.length} length, and ${settings.style} style as specified in the settings.`;
      setGeneratedContent(mockContent);
    } finally {
      setIsGenerating(false);
    }
  };

  const handleCopy = () => {
    navigator.clipboard.writeText(generatedContent);
  };

  const handleSave = async () => {
    if (!generatedContent.trim()) return;
    
    try {
      const result = await contentCreatorAPI.saveContent({
        title: `Generated ${contentType} content`,
        content: generatedContent,
        type: contentType,
        category: 'generated',
        tags: [contentType, settings.tone, settings.style],
      });

      if (result.success) {
        console.log('Content saved successfully with ID:', result.id);
        // You could show a success notification here
      } else {
        console.error('Failed to save content:', result.error);
        // You could show an error notification here
      }
    } catch (error) {
      console.error('Save content error:', error);
    }
  };

  return (
    <div className="p-6">
      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">
        {/* Input Section */}
        <div className="space-y-6">
          <div>
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Describe what you want to create
            </label>
            <textarea
              value={prompt}
              onChange={(e) => setPrompt(e.target.value)}
              placeholder={`Describe the ${contentType} content you want to generate...`}
              className="w-full h-32 px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent dark:bg-gray-700 dark:text-white resize-none"
            />
          </div>

          {/* Settings */}
          <div className="space-y-4">
            <h3 className="text-sm font-medium text-gray-900 dark:text-white">Generation Settings</h3>
            
            <div className="grid grid-cols-2 gap-4">
              <div>
                <label className="block text-xs font-medium text-gray-700 dark:text-gray-300 mb-1">Tone</label>
                <select
                  value={settings.tone}
                  onChange={(e) => setSettings({ ...settings, tone: e.target.value })}
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent dark:bg-gray-700 dark:text-white text-sm"
                >
                  {tones.map(tone => (
                    <option key={tone} value={tone}>{tone.charAt(0).toUpperCase() + tone.slice(1)}</option>
                  ))}
                </select>
              </div>

              <div>
                <label className="block text-xs font-medium text-gray-700 dark:text-gray-300 mb-1">Length</label>
                <select
                  value={settings.length}
                  onChange={(e) => setSettings({ ...settings, length: e.target.value })}
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent dark:bg-gray-700 dark:text-white text-sm"
                >
                  {lengths.map(length => (
                    <option key={length} value={length}>{length.charAt(0).toUpperCase() + length.slice(1)}</option>
                  ))}
                </select>
              </div>

              <div>
                <label className="block text-xs font-medium text-gray-700 dark:text-gray-300 mb-1">Style</label>
                <select
                  value={settings.style}
                  onChange={(e) => setSettings({ ...settings, style: e.target.value })}
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent dark:bg-gray-700 dark:text-white text-sm"
                >
                  {styles.map(style => (
                    <option key={style} value={style}>{style.charAt(0).toUpperCase() + style.slice(1)}</option>
                  ))}
                </select>
              </div>

              <div>
                <label className="block text-xs font-medium text-gray-700 dark:text-gray-300 mb-1">Language</label>
                <select
                  value={settings.language}
                  onChange={(e) => setSettings({ ...settings, language: e.target.value })}
                  className="w-full px-3 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-primary-500 focus:border-transparent dark:bg-gray-700 dark:text-white text-sm"
                >
                  {languages.map(language => (
                    <option key={language} value={language}>{language.charAt(0).toUpperCase() + language.slice(1)}</option>
                  ))}
                </select>
              </div>
            </div>
          </div>

          {/* Generate Button */}
          <button
            onClick={handleGenerate}
            disabled={!prompt.trim() || isGenerating}
            className="w-full bg-gradient-to-r from-purple-600 to-blue-600 hover:from-purple-700 hover:to-blue-700 text-white font-medium py-3 px-4 rounded-lg transition-all duration-200 disabled:opacity-50 disabled:cursor-not-allowed flex items-center justify-center space-x-2"
          >
            {isGenerating ? (
              <>
                <RefreshCw className="w-5 h-5 animate-spin" />
                <span>Generating...</span>
              </>
            ) : (
              <>
                <Sparkles className="w-5 h-5" />
                <span>Generate {contentType.charAt(0).toUpperCase() + contentType.slice(1)}</span>
              </>
            )}
          </button>
        </div>

        {/* Output Section */}
        <div className="space-y-4">
          <div className="flex items-center justify-between">
            <h3 className="text-sm font-medium text-gray-900 dark:text-white">Generated Content</h3>
            {generatedContent && (
              <div className="flex items-center space-x-2">
                <button
                  onClick={handleCopy}
                  className="p-2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 transition-colors"
                  title="Copy to clipboard"
                >
                  <Copy className="w-4 h-4" />
                </button>
                <button
                  onClick={handleSave}
                  className="p-2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 transition-colors"
                  title="Save to library"
                >
                  <Save className="w-4 h-4" />
                </button>
                <button className="p-2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 transition-colors" title="Download">
                  <Download className="w-4 h-4" />
                </button>
                <button className="p-2 text-gray-500 hover:text-gray-700 dark:text-gray-400 dark:hover:text-gray-200 transition-colors" title="Share">
                  <Share2 className="w-4 h-4" />
                </button>
              </div>
            )}
          </div>

          <div className="bg-gray-50 dark:bg-gray-700 rounded-lg p-4 min-h-[200px]">
            {generatedContent ? (
              <div className="space-y-4">
                <div className="bg-white dark:bg-gray-800 rounded-lg p-4 border border-gray-200 dark:border-gray-600">
                  <pre className="whitespace-pre-wrap text-sm text-gray-900 dark:text-white font-sans">
                    {generatedContent}
                  </pre>
                </div>
                
                <div className="flex items-center space-x-3">
                  <button className="flex items-center space-x-2 px-3 py-2 bg-primary-600 hover:bg-primary-700 text-white text-sm font-medium rounded-lg transition-colors">
                    <Edit className="w-4 h-4" />
                    <span>Edit</span>
                  </button>
                  <button className="flex items-center space-x-2 px-3 py-2 bg-gray-600 hover:bg-gray-700 text-white text-sm font-medium rounded-lg transition-colors">
                    <Eye className="w-4 h-4" />
                    <span>Preview</span>
                  </button>
                </div>
              </div>
            ) : (
              <div className="flex items-center justify-center h-full text-gray-500 dark:text-gray-400">
                <div className="text-center">
                  <Sparkles className="w-12 h-12 mx-auto mb-2 opacity-50" />
                  <p>Generated content will appear here</p>
                </div>
              </div>
            )}
          </div>
        </div>
      </div>
    </div>
  );
};

export default ContentGenerator; 