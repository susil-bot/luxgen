name: 🚀 Continuous Deployment

on:
  push:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'production'
        type: choice
        options:
        - staging
        - production

env:
  NODE_VERSION: '18'

jobs:
  # 🏗️ Build Production
  build-production:
    name: 🏗️ Build Production
    runs-on: ubuntu-latest
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'

      - name: 📦 Install Dependencies
        run: npm ci

      - name: 🏗️ Build Application
        run: npm run build
        env:
          REACT_APP_API_URL: ${{ secrets.REACT_APP_API_URL || 'https://luxgen-backend.netlify.app' }}
          REACT_APP_ENVIRONMENT: production
          NODE_ENV: production

      - name: 📊 Bundle Analysis
        run: |
          echo "## 📊 Bundle Analysis" >> $GITHUB_STEP_SUMMARY
          echo "| File | Size |" >> $GITHUB_STEP_SUMMARY
          echo "|------|------|" >> $GITHUB_STEP_SUMMARY
          du -sh build/static/js/*.js | while read size file; do
            echo "| \`$file\` | \`$size\` |" >> $GITHUB_STEP_SUMMARY
          done

      - name: 📦 Upload Build Artifacts
        uses: actions/upload-artifact@v4
        with:
          name: production-build
          path: build/
          retention-days: 30

  # 🚀 Deploy to Staging
  deploy-staging:
    name: 🚀 Deploy to Staging
    runs-on: ubuntu-latest
    needs: build-production
    if: github.ref == 'refs/heads/develop' || github.event.inputs.environment == 'staging'
    environment: staging
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: production-build
          path: build/

      - name: 🚀 Deploy to Vercel Staging
        if: ${{ secrets.VERCEL_TOKEN }}
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          vercel-args: '--target preview'
      
      - name: ⚠️ Vercel Deployment Skipped
        if: ${{ !secrets.VERCEL_TOKEN }}
        run: echo "Vercel deployment skipped - missing VERCEL_TOKEN secret"

      - name: 🧪 Run Smoke Tests
        run: |
          echo "Running smoke tests on staging..."
          # Add smoke test commands here

  # 🚀 Deploy to Production
  deploy-production:
    name: 🚀 Deploy to Production
    runs-on: ubuntu-latest
    needs: build-production
    if: github.ref == 'refs/heads/main' || github.event.inputs.environment == 'production'
    environment: production
    steps:
      - name: 📥 Checkout Code
        uses: actions/checkout@v4

      - name: 📦 Download Build Artifacts
        uses: actions/download-artifact@v4
        with:
          name: production-build
          path: build/

      - name: 🚀 Deploy to Vercel Production
        if: ${{ secrets.VERCEL_TOKEN }}
        uses: amondnet/vercel-action@v25
        with:
          vercel-token: ${{ secrets.VERCEL_TOKEN }}
          vercel-org-id: ${{ secrets.VERCEL_ORG_ID }}
          vercel-project-id: ${{ secrets.VERCEL_PROJECT_ID }}
          working-directory: ./
          vercel-args: '--prod'
      
      - name: ⚠️ Vercel Deployment Skipped
        if: ${{ !secrets.VERCEL_TOKEN }}
        run: echo "Vercel deployment skipped - missing VERCEL_TOKEN secret"

      - name: 🧪 Run Production Tests
        run: |
          echo "Running production tests..."
          # Add production test commands here

      - name: 📊 Performance Check
        run: |
          echo "Running performance checks..."
          # Add performance check commands here

  # 📊 Deployment Report
  deployment-report:
    name: 📊 Deployment Report
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    steps:
      - name: 📊 Generate Deployment Report
        run: |
          echo "## 🚀 Deployment Report" >> $GITHUB_STEP_SUMMARY
          echo "| Environment | Status | URL |" >> $GITHUB_STEP_SUMMARY
          echo "|-------------|--------|-----|" >> $GITHUB_STEP_SUMMARY
          echo "| Staging | ${{ needs.deploy-staging.result == 'success' && '✅' || '❌' }} | ${{ needs.deploy-staging.result == 'success' && 'https://staging.luxgen.com' || 'N/A' }} |" >> $GITHUB_STEP_SUMMARY
          echo "| Production | ${{ needs.deploy-production.result == 'success' && '✅' || '❌' }} | ${{ needs.deploy-production.result == 'success' && 'https://luxgen.com' || 'N/A' }} |" >> $GITHUB_STEP_SUMMARY
