# LuxGen Frontend Cursor AI Rules - STRICT ENFORCEMENT

## CRITICAL RULES - NO EXCEPTIONS

### **1. PROJECT STRUCTURE - ABSOLUTE RULE**
- **REPOSITORY**: `luxgen-idea/luxgen` (React frontend)
- **NEVER CREATE NEW REPOSITORIES**
- **NEVER USE EXTERNAL REPOSITORIES**
- **NEVER MIX FRONTEND/BACKEND CODE**

### **2. DATABASE RULE - MANDATORY**
- **DATABASE NAME**: `luxgen` (NEVER use `test`)
- **MULTI-TENANT**: Always include `tenantId` in all models
- **NEVER QUERY ACROSS TENANTS**

### **3. COMPONENT STRUCTURE - EXACT PATTERN**
Every component MUST have these 10 files:
```
[ComponentName]/
├── index.tsx                 # Main component
├── [ComponentName]Helper.js  # Utility functions
├── [ComponentName]Fetcher.js # API calls
├── [ComponentName]Transformer.js # Data transformation
├── [ComponentName].spec.js   # Unit tests
├── queries.js               # Database queries
├── fixture.js               # Mock data
├── types.ts                   # TypeScript types
├── constants.ts             # Constants
└── README.md               # Documentation
```

### **4. CODE GENERATION RULES**
- **ALWAYS** use the exact templates provided
- **ALWAYS** include all 10 files for components
- **ALWAYS** use TypeScript with proper types
- **ALWAYS** implement proper error handling
- **ALWAYS** write comprehensive tests
- **ALWAYS** create proper documentation

### **5. TECHNOLOGY STACK - FIXED**
- **Frontend**: React 18 + TypeScript + Tailwind CSS + Vite
- **Testing**: Jest + React Testing Library
- **Styling**: Tailwind CSS ONLY (no other CSS frameworks)

### **6. FILE NAMING - EXACT CONVENTIONS**
- **Components**: `PascalCase.tsx` (e.g., `UserProfile.tsx`)
- **Helpers**: `[ComponentName]Helper.js`
- **Fetchers**: `[ComponentName]Fetcher.js`
- **Transformers**: `[ComponentName]Transformer.js`
- **Tests**: `[ComponentName].spec.js`
- **Types**: `types.ts`
- **Constants**: `constants.ts`

### **7. CODE QUALITY - MANDATORY**
- **TypeScript**: ALWAYS use TypeScript with strict types
- **Error Handling**: ALWAYS implement proper error handling
- **Testing**: ALWAYS write unit tests for all functions
- **Documentation**: ALWAYS create README.md for components
- **Security**: ALWAYS validate input and sanitize data

### **8. AI ASSISTANT BEHAVIOR - STRICT**
- **NEVER HALLUCINATE**: Only use existing code and patterns
- **NEVER CREATE NEW REPOSITORIES**: Only work with `luxgen-idea/luxgen`
- **NEVER SKIP FILES**: Always create all 10 files for components
- **NEVER USE EXTERNAL DEPENDENCIES**: Only use existing packages
- **ALWAYS FOLLOW TEMPLATES**: Use exact patterns provided
- **ALWAYS VERIFY**: Check if files exist before creating

### **9. FORBIDDEN ACTIONS**
- **NEVER** create new repositories
- **NEVER** use external repositories
- **NEVER** skip component structure
- **NEVER** use hardcoded values
- **NEVER** skip error handling
- **NEVER** skip testing
- **NEVER** skip documentation
- **NEVER** use `test` database
- **NEVER** query across tenants
- **NEVER** mix frontend/backend code

### **10. GIT WORKFLOW - MANDATORY**
- **EACH FEATURE**: Must have its own separate branch
- **EACH FEATURE**: Must have its own Pull Request (PR)
- **NEVER USE EXISTING BRANCH**: For new features or fixes
- **BRANCH NAMING**: Use descriptive names (e.g., `feature/activity-feed`, `fix/user-auth-bug`)
- **PR NAMING**: Use clear, descriptive titles
- **BRANCH ISOLATION**: Each feature branch must be independent
- **NO MIXING**: Never mix multiple features in one branch
- **CLEAN HISTORY**: Keep commit history clean and logical
- **REVIEW PROCESS**: All PRs must be reviewed before merging
- **TESTING**: All features must be tested before PR submission

### **11. MANDATORY TEMPLATES**

#### **React Component Template**
```tsx
import React, { useState, useEffect } from 'react';
import { ComponentNameHelper } from './helpers';
import { ComponentNameFetcher } from './fetchers';
import { ComponentNameTransformer } from './transformers';

interface ComponentNameProps {
  // Define props here
}

const ComponentName: React.FC<ComponentNameProps> = ({ ...props }) => {
  // Component logic here
  return (
    <div className="tailwind-classes">
      {/* Component JSX */}
    </div>
  );
};

export default ComponentName;
```

### **12. ENFORCEMENT RULES**
- **ALWAYS** follow these rules exactly
- **ALWAYS** check existing code before creating new
- **ALWAYS** use existing patterns and templates
- **ALWAYS** verify file structure before proceeding
- **NEVER** deviate from established patterns
- **NEVER** create files that don't follow the structure
- **NEVER** use external dependencies not in package.json
- **NEVER** skip any of the mandatory files

### **13. VERIFICATION CHECKLIST**
Before creating any component, verify:
- [ ] All 10 files will be created
- [ ] File names follow exact conventions
- [ ] TypeScript types are properly defined
- [ ] Error handling is implemented
- [ ] Tests are included
- [ ] Documentation is created
- [ ] No external dependencies are used
- [ ] Database uses `luxgen` name
- [ ] Multi-tenant structure is followed
- [ ] New branch created for feature
- [ ] PR will be created for feature

### **14. SYSTEM PROMPT OVERRIDE**
You are working on the LuxGen frontend project. You MUST:
1. **NEVER HALLUCINATE** - Only use existing code patterns
2. **NEVER CREATE NEW REPOSITORIES** - Only work with `luxgen-idea/luxgen`
3. **ALWAYS CREATE ALL 10 FILES** for every component
4. **ALWAYS USE EXISTING TEMPLATES** - Don't invent new patterns
5. **ALWAYS VERIFY STRUCTURE** before creating files
6. **NEVER USE EXTERNAL DEPENDENCIES** not in package.json
7. **ALWAYS USE `luxgen` DATABASE** - Never use `test`
8. **ALWAYS INCLUDE `tenantId`** in all database models
9. **ALWAYS FOLLOW EXACT NAMING** conventions
10. **ALWAYS IMPLEMENT ERROR HANDLING** and testing
11. **ALWAYS CREATE NEW BRANCH** for each feature
12. **ALWAYS CREATE PR** for each feature

### **15. HALLUCINATION PREVENTION**
- **BEFORE CREATING**: Check if similar components exist
- **BEFORE CREATING**: Verify the exact file structure needed
- **BEFORE CREATING**: Ensure all dependencies exist
- **BEFORE CREATING**: Confirm database name is `luxgen`
- **BEFORE CREATING**: Verify tenant isolation is implemented
- **BEFORE CREATING**: Create new branch for feature
- **NEVER ASSUME**: Always check existing code first
- **NEVER INVENT**: Only use established patterns
- **NEVER SKIP**: Always create all required files

Remember: Quality over speed. Better to deliver complete, tested, and documented solutions than quick fixes.
